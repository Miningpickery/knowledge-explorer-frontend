// ============================================================================
// VARIABLE NAME CONSISTENCY TEST SCRIPT
// ============================================================================

const fs = require('fs');
const path = require('path');

// ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ÄÏû•
const testResults = {
  passed: 0,
  failed: 0,
  errors: []
};

// ÌÖåÏä§Ìä∏ Ìó¨Ìçº Ìï®Ïàò
const runTest = async (testName, testFunction) => {
  try {
    console.log(`\nüß™ Running test: ${testName}`);
    await testFunction();
    console.log(`‚úÖ PASS: ${testName}`);
    testResults.passed++;
  } catch (error) {
    console.log(`‚ùå FAIL: ${testName}`);
    console.log(`   Error: ${error.message}`);
    testResults.failed++;
    testResults.errors.push({ test: testName, error: error.message });
  }
};

// 1. req.user Î≥ÄÏàòÎ™Ö ÏùºÍ¥ÄÏÑ± ÌÖåÏä§Ìä∏
const testReqUserConsistency = async () => {
  const srcDir = path.join(__dirname, '..', 'src');
  const jsFiles = getAllJsFiles(srcDir);
  
  const inconsistentPatterns = [];
  
  for (const file of jsFiles) {
    // ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏûêÏ≤¥Îäî Ï†úÏô∏
    if (file.includes('test-variable-consistency.js') || file.includes('test-normalization.js')) {
      continue;
    }
    
    const content = fs.readFileSync(file, 'utf8');
    
    // req.user.userId Ìå®ÌÑ¥ Ï∞æÍ∏∞ (Ïù¥Ï†úÎäî req.user.idÎ•º ÏÇ¨Ïö©Ìï¥Ïïº Ìï®)
    const userIdMatches = content.match(/req\.user\.userId/g);
    if (userIdMatches) {
      inconsistentPatterns.push({
        file: path.relative(process.cwd(), file),
        pattern: 'req.user.userId',
        count: userIdMatches.length
      });
    }
    
    // user.id vs user.userId ÌòºÏû¨ ÏÇ¨Ïö© ÌôïÏù∏
    const userDotIdMatches = content.match(/user\.id/g);
    const userDotUserIdMatches = content.match(/user\.userId/g);
    
    if (userDotIdMatches && userDotUserIdMatches) {
      inconsistentPatterns.push({
        file: path.relative(process.cwd(), file),
        pattern: 'user.id vs user.userId ÌòºÏû¨',
        count: userDotIdMatches.length + userDotUserIdMatches.length
      });
    }
  }
  
  if (inconsistentPatterns.length > 0) {
    throw new Error(`Î≥ÄÏàòÎ™Ö Î∂àÏùºÏπò Î∞úÍ≤¨:\n${inconsistentPatterns.map(p => 
      `  - ${p.file}: ${p.pattern} (${p.count}Í∞ú)`
    ).join('\n')}`);
  }
};

// 2. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïª¨ÎüºÎ™Ö ÏùºÍ¥ÄÏÑ± ÌÖåÏä§Ìä∏
const testDatabaseColumnConsistency = async () => {
  const srcDir = path.join(__dirname, '..', 'src');
  const jsFiles = getAllJsFiles(srcDir);
  
  const inconsistentPatterns = [];
  
  for (const file of jsFiles) {
    // ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏûêÏ≤¥Îäî Ï†úÏô∏
    if (file.includes('test-variable-consistency.js') || file.includes('test-normalization.js')) {
      continue;
    }
    
    const content = fs.readFileSync(file, 'utf8');
    
    // user_id Ïª¨ÎüºÎ™ÖÏù¥ Ïò¨Î∞îÎ•¥Í≤å ÏÇ¨Ïö©ÎêòÎäîÏßÄ ÌôïÏù∏
    const userUnderscoreIdMatches = content.match(/user_id/g);
    const userIdCamelCaseMatches = content.match(/userId/g);
    
    // SQL ÏøºÎ¶¨ÏóêÏÑúÎäî user_idÎ•º ÏÇ¨Ïö©Ìï¥Ïïº Ìï®
    const sqlQueries = content.match(/SELECT.*FROM|INSERT.*INTO|UPDATE.*SET|DELETE.*FROM/gi);
    if (sqlQueries) {
      for (const query of sqlQueries) {
        if (query.includes('userId') && !query.includes('user_id')) {
          inconsistentPatterns.push({
            file: path.relative(process.cwd(), file),
            pattern: 'SQLÏóêÏÑú userId ÏÇ¨Ïö© (user_idÏó¨Ïïº Ìï®)',
            query: `${query.substring(0, 100)  }...`
          });
        }
      }
    }
  }
  
  if (inconsistentPatterns.length > 0) {
    throw new Error(`Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïª¨ÎüºÎ™Ö Î∂àÏùºÏπò Î∞úÍ≤¨:\n${inconsistentPatterns.map(p => 
      `  - ${p.file}: ${p.pattern}\n    Query: ${p.query}`
    ).join('\n')}`);
  }
};

// 3. Ìï®Ïàò Îß§Í∞úÎ≥ÄÏàò ÏùºÍ¥ÄÏÑ± ÌÖåÏä§Ìä∏
const testFunctionParameterConsistency = async () => {
  const srcDir = path.join(__dirname, '..', 'src');
  const jsFiles = getAllJsFiles(srcDir);
  
  const inconsistentPatterns = [];
  
  for (const file of jsFiles) {
    // ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏûêÏ≤¥Îäî Ï†úÏô∏
    if (file.includes('test-variable-consistency.js') || file.includes('test-normalization.js')) {
      continue;
    }
    
    const content = fs.readFileSync(file, 'utf8');
    
    // Ìï®Ïàò Ï†ïÏùòÏóêÏÑú userId vs id Îß§Í∞úÎ≥ÄÏàò ÌôïÏù∏
    const functionDefs = content.match(/function\s+\w+\s*\([^)]*\)|const\s+\w+\s*=\s*\([^)]*\)\s*=>/g);
    if (functionDefs) {
      for (const funcDef of functionDefs) {
        if (funcDef.includes('userId') && funcDef.includes('id')) {
          inconsistentPatterns.push({
            file: path.relative(process.cwd(), file),
            pattern: 'Ìï®Ïàò Îß§Í∞úÎ≥ÄÏàòÏóêÏÑú userIdÏôÄ id ÌòºÏû¨',
            function: `${funcDef.substring(0, 100)  }...`
          });
        }
      }
    }
  }
  
  if (inconsistentPatterns.length > 0) {
    throw new Error(`Ìï®Ïàò Îß§Í∞úÎ≥ÄÏàò Î∂àÏùºÏπò Î∞úÍ≤¨:\n${inconsistentPatterns.map(p => 
      `  - ${p.file}: ${p.pattern}\n    Function: ${p.function}`
    ).join('\n')}`);
  }
};

// 4. Ï£ºÏÑù ÏùºÍ¥ÄÏÑ± ÌÖåÏä§Ìä∏
const testCommentConsistency = async () => {
  const srcDir = path.join(__dirname, '..', 'src');
  const jsFiles = getAllJsFiles(srcDir);
  
  const inconsistentPatterns = [];
  
  for (const file of jsFiles) {
    // ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏûêÏ≤¥Îäî Ï†úÏô∏
    if (file.includes('test-variable-consistency.js') || file.includes('test-normalization.js')) {
      continue;
    }
    
    const content = fs.readFileSync(file, 'utf8');
    
    // Ï£ºÏÑùÏóêÏÑú ÌòºÎûÄÏä§Îü¨Ïö¥ ÏÑ§Î™Ö ÌôïÏù∏
    const comments = content.match(/\/\/.*$/gm);
    if (comments) {
      for (const comment of comments) {
        if (comment.includes('userId') && comment.includes('user.id')) {
          inconsistentPatterns.push({
            file: path.relative(process.cwd(), file),
            pattern: 'Ï£ºÏÑùÏóêÏÑú userIdÏôÄ user.id ÌòºÏû¨ Ïñ∏Í∏â',
            comment: comment.trim()
          });
        }
      }
    }
  }
  
  if (inconsistentPatterns.length > 0) {
    console.log(`‚ö†Ô∏è Ï£ºÏÑù Î∂àÏùºÏπò Î∞úÍ≤¨ (Í≤ΩÍ≥†):\n${inconsistentPatterns.map(p => 
      `  - ${p.file}: ${p.comment}`
    ).join('\n')}`);
  }
};

// Î™®Îì† JS ÌååÏùº Ï∞æÍ∏∞
const getAllJsFiles = (dir) => {
  const files = [];
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      files.push(...getAllJsFiles(fullPath));
    } else if (item.endsWith('.js')) {
      files.push(fullPath);
    }
  }
  
  return files;
};

// Î©îÏù∏ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
const runAllTests = async () => {
  console.log('üöÄ Starting Variable Name Consistency Tests...\n');
  
  await runTest('req.user Î≥ÄÏàòÎ™Ö ÏùºÍ¥ÄÏÑ±', testReqUserConsistency);
  await runTest('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïª¨ÎüºÎ™Ö ÏùºÍ¥ÄÏÑ±', testDatabaseColumnConsistency);
  await runTest('Ìï®Ïàò Îß§Í∞úÎ≥ÄÏàò ÏùºÍ¥ÄÏÑ±', testFunctionParameterConsistency);
  await runTest('Ï£ºÏÑù ÏùºÍ¥ÄÏÑ±', testCommentConsistency);
  
  // Í≤∞Í≥º Ï∂úÎ†•
  console.log('\nüìä Test Results Summary:');
  console.log(`‚úÖ Passed: ${testResults.passed}`);
  console.log(`‚ùå Failed: ${testResults.failed}`);
  console.log(`üìà Success Rate: ${((testResults.passed / (testResults.passed + testResults.failed)) * 100).toFixed(1)}%`);
  
  if (testResults.errors.length > 0) {
    console.log('\n‚ùå Failed Tests:');
    testResults.errors.forEach(({ test, error }) => {
      console.log(`   - ${test}: ${error}`);
    });
  }
  
  if (testResults.failed === 0) {
    console.log('\nüéâ All variable name consistency tests passed!');
  } else {
    console.log('\n‚ö†Ô∏è Some tests failed. Please fix the variable name inconsistencies above.');
    process.exit(1);
  }
};

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  runAllTests()
    .then(() => {
      console.log('\n‚úÖ Variable name consistency test completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Test execution failed:', error);
      process.exit(1);
    });
}

module.exports = {
  runAllTests,
  testResults
};
