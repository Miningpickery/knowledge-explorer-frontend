# 🚀 CI/CD Pipeline
# 상용화 수준의 GitHub Actions 워크플로우

name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: docker.io  # Docker Hub 사용
  IMAGE_NAME: miningpickery/knowledge-explorer  # Docker Hub 사용자명/리포지토리

jobs:
  # 🧪 테스트 및 코드 품질 검사
  test:
    name: 🧪 Test & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: knowledge_explorer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Lint Code
        run: npm run lint --if-present

      - name: 🎨 Check Code Formatting
        run: npm run format:check --if-present

      - name: 🛡️ Security Audit
        run: npm audit --audit-level=high

      - name: 🧪 Run Tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/knowledge_explorer_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: 📊 Upload Coverage Reports (일시 비활성화)
        run: echo "Coverage upload temporarily disabled"

      # - name: 🏷️ SonarCloud Analysis (일시 비활성화)
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🏗️ 빌드 및 도커 이미지 생성
  build:
    name: 🏗️ Build & Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 🚀 스테이징 배포 (일시 비활성화)
  # deploy-staging:
  #   name: 🚀 Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/develop' && false  # 일시 비활성화
  #   
  #   steps:
  #     - name: 📥 Checkout Code
  #       uses: actions/checkout@v4
  #
  #     - name: 🔧 Setup Docker Context
  #       run: |
  #         docker context create remote --docker "host=ssh://${{ secrets.STAGING_HOST }}"
  #         docker context use remote
  #
  #     - name: 🚀 Deploy to Staging
  #       run: |
  #         docker-compose -f docker-compose.staging.yml down
  #         docker-compose -f docker-compose.staging.yml pull
  #         docker-compose -f docker-compose.staging.yml up -d
  #       env:
  #         DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
  #         JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
  #         GOOGLE_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
  #         GOOGLE_CLIENT_SECRET: ${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
  #         GEMINI_API_KEY: ${{ secrets.STAGING_GEMINI_API_KEY }}
  #
  #     - name: 🔍 Health Check
  #       run: |
  #         sleep 30
  #         curl -f ${{ secrets.STAGING_URL }}/health || exit 1
  #
  #     # - name: 📢 Notify Slack
  #     #   uses: 8398a7/action-slack@v3
  #     #   with:
  #     #     status: ${{ job.status }}
  #     #     channel: '#deployments'
  #     #   env:
  #     #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 🏭 프로덕션 배포 (일시 비활성화)
  # deploy-production:
  #   name: 🏭 Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'release' && false  # 일시 비활성화
  #   
  #   steps:
  #     - name: 📥 Checkout Code
  #       uses: actions/checkout@v4
  #
  #     - name: 🔧 Setup Kubernetes
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'v1.28.0'
  #
  #     - name: 🔐 Configure Kubernetes Context
  #       uses: azure/k8s-set-context@v3
  #       with:
  #         method: kubeconfig
  #         kubeconfig: ${{ secrets.KUBE_CONFIG }}
  #
  #     - name: 🚀 Deploy to Kubernetes
  #       run: |
  #         kubectl apply -f k8s/
  #         kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
  #         kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
  #         kubectl rollout status deployment/backend
  #         kubectl rollout status deployment/frontend
  #
  #     - name: 🔍 Production Health Check
  #       run: |
  #         sleep 60
  #         curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
  #
  #     - name: 📊 Create GitHub Release Notes
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         body: |
  #           ## 🚀 Release ${{ github.ref_name }}
  #           
  #           ### 📋 Changes
  #           ${{ github.event.release.body }}
  #           
  #           ### 🐳 Docker Images
  #           - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}`
  #           - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}`
  #           
  #           ### 🔗 Links
  #           - [Production URL](${{ secrets.PRODUCTION_URL }})
  #           - [Monitoring Dashboard](${{ secrets.MONITORING_URL }})
  #
  #     # - name: 📢 Notify Teams
  #     #   uses: 8398a7/action-slack@v3
  #     #   with:
  #     #     status: ${{ job.status }}
  #     #     channel: '#releases'
  #     #     fields: repo,message,commit,author,action,eventName,ref,workflow
  #     #   env:
  #     #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 🛡️ 보안 스캔
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🛡️ OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'knowledge-explorer'
          path: '.'
          format: 'JSON'

  # 📊 성능 테스트
  performance-test:
    name: 📊 Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.STAGING_URL }}
            ${{ secrets.STAGING_URL }}/login
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📈 Run Load Testing
        run: |
          npx artillery run performance/load-test.yml --target ${{ secrets.STAGING_URL }}
        if: success()

  # 🧹 정리 작업
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [test, build, deploy-staging, deploy-production]
    
    steps:
      - name: 🗑️ Clean up old Docker images
        run: |
          docker image prune -af --filter="until=24h"
        continue-on-error: true

      - name: 📊 Update Badge Status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: 'CI/CD Pipeline'
          state: ${{ job.status }}
          sha: ${{ github.sha }}
