# 🐳 Docker Compose Configuration
# 상용화 수준의 멀티 서비스 컨테이너 구성

version: '3.8'

services:
  # 📊 PostgreSQL 데이터베이스
  database:
    image: postgres:15-alpine
    container_name: knowledge-explorer-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-knowledge_explorer}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - knowledge-explorer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-knowledge_explorer}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 🗄️ Redis (캐싱 및 세션)
  redis:
    image: redis:7-alpine
    container_name: knowledge-explorer-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - knowledge-explorer-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 🖥️ Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: knowledge-explorer-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-knowledge_explorer}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - knowledge-explorer-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 🌐 Frontend Web Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: knowledge-explorer-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - knowledge-explorer-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 📊 Monitoring (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: knowledge-explorer-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - knowledge-explorer-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: knowledge-explorer-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - knowledge-explorer-network
    profiles:
      - monitoring

# 💾 볼륨 설정
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 🌐 네트워크 설정
networks:
  knowledge-explorer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
